name: Build @cryptlex/lexactivator package

on:
  workflow_dispatch:
    inputs:
      libraryVersion:
        description: 'Library Version'
        required: true
        default: ''
      packageVersion:
        description: 'Package Version'
        required: true
        default: ''

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Update Library Version
        run: |
          sed -i '/const version =/!b;cconst version = \"v${{ github.event.inputs.libraryVersion }}";' predownload.js    
      
      - name: Update Package Version
        run: |
          sed -i '/"version":/!b;c \ \ "version": "${{ github.event.inputs.packageVersion }}",' package.json
     
      - name: Commit, Tag and Push
        run: |
          git add predownload.js
          git add package.json
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m "updated version" | exit 0
          git tag ${{ github.event.inputs.packageVersion }}
          
     
  build:
    needs: update-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
    steps:
      - uses: actions/checkout@v2

      - run: git pull origin master --ff-only

      - uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Install Windows 2015 build tools
        if: matrix.os == 'windows-2019'
        run: npm i --global windows-build-tools --vs2015

      - name: Build for Windows
        if: matrix.os == 'windows-2019'
        run: |
          npm i -g node-gyp@7

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          npm i -g node-gyp@7
          ./scripts/build-macos.sh

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run -it -v $PWD:$PWD -w $PWD cryptlex/gcc-4.7:1 ./scripts/build-linux.sh
          docker run -it -v $PWD:$PWD -w $PWD cryptlex/gcc-4.9-arm:1 ./scripts/build-linux-arm.sh
          docker run -it -v $PWD:$PWD -w $PWD cryptlex/alpine-builder:2 ./scripts/build-linux-musl.sh

      - name: 'Upload artifacts'
        uses: actions/upload-artifact@v2
        with:
          path: |
            ./lib/bindings/linux/**/**/*.node
            ./lib/bindings/macos/**/*.node
            ./lib/bindings/windows/**/*.node
          retention-days: 1

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git pull origin master --ff-only
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/

      - name: 'Download artifacts'
        uses: actions/upload-artifact@v2

      - run: npm publish --dry-run --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
